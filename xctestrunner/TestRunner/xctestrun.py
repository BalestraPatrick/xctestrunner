# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Helper class for xctestrun file generated by prebuilt bundles."""

import glob
import os
import shutil
import tempfile

from xctestrunner.Shared import ios_constants
from xctestrunner.Shared import ios_errors
from xctestrunner.Shared import plist_util
from xctestrunner.TestRunner import dummy_project
from xctestrunner.TestRunner import xcodebuild_test_executor


TESTROOT_RELATIVE_PATH = '__TESTROOT__'


class XctestRun(object):
  """Handles running test by xctestrun."""

  def __init__(self, app_under_test_dir, test_bundle_dir,
               sdk=ios_constants.SDK.IPHONESIMULATOR,
               test_type=ios_constants.TestType.XCUITEST, work_dir=None):
    """Initializes the XctestRun object.

    If arg work_dir is provided, the original app under test file and test
    bundle file will be moved to work_dir/TEST_ROOT.

    Args:
      app_under_test_dir: string, path of the application to be tested.
      test_bundle_dir: string, path of the test bundle.
      sdk: string, SDKRoot of the test. See supported SDKs in module
          Shared.ios_constants.
      test_type: string, test type of the test bundle. See supported test types
          in module Shared.ios_constants.
      work_dir: string, work directory which contains run files.

    Raises:
      IllegalArgumentError: when the sdk or test type is not supported.
    """
    self._app_under_test_dir = app_under_test_dir
    self._test_bundle_dir = test_bundle_dir
    self._test_name = os.path.splitext(os.path.basename(test_bundle_dir))[0]
    self._sdk = sdk
    self._test_type = test_type
    self._work_dir = work_dir
    self._test_root_dir = None
    self._xctestrun_file_path = None
    self._xctestrun_file_plist_obj = None
    self._is_xctestrun_file_generated = False
    self._delete_work_dir = False
    self._ValidateArguments()

  def __enter__(self):
    return self

  def __exit__(self, unused_type, unused_value, unused_traceback):
    """Deletes the temp directories."""
    self.Close()

  def SetEnvVars(self, env_vars):
    """Sets the additional environment variables in the xctestrun file.

    Args:
     env_vars: a list of string. The format of each item is Env-Key=Env-Value.
    """
    if not env_vars:
      return
    test_env_vars = self.GetXctestrunFileField('EnvironmentVariables')
    for env_var in env_vars:
      key, value = env_var.split('=', 1)
      test_env_vars[key] = value
    self.SetXctestrunFileField('EnvironmentVariables', test_env_vars)

  def SetEnvVarDict(self, env_vars):
    """Sets the additional environment variables in the xctestrun file.

    Args:
     env_vars: dict. Both key and value is string.
    """
    if not env_vars:
      return
    test_env_vars = self.GetXctestrunFileField('EnvironmentVariables')
    for key, value in env_vars.items():
      test_env_vars[key] = value
    self.SetXctestrunFileField('EnvironmentVariables', test_env_vars)

  def SetArgs(self, args):
    """Sets the additional arguments in the xctestrun file.

    Args:
     args: a list of string. Each item is an argument.
    """
    if not args:
      return
    # The generated xctest is always empty. So set it directly.
    self.SetXctestrunFileField('CommandLineArguments', args)

  def SetTestsToRun(self, tests_to_run):
    """Sets the specific test methods/test classes to run in xctestrun file.

    Args:
      tests_to_run: a list of string. The format of each item is
          Test-Class-Name[/Test-Method-Name]
    """
    if not tests_to_run or tests_to_run == ['all']:
      return
    self.SetXctestrunFileField('OnlyTestIdentifiers', tests_to_run)

  def Run(self, device_id, derived_data_dir):
    """Runs the test with generated xctestrun file in the specific device.

    Args:
      device_id: ID of the device.
      derived_data_dir: path of derived data directory of this test session.
    """
    self.GenerateXctestrunFile()
    print 'Running test-without-building with device %s' % device_id
    command = ['xcodebuild', 'test-without-building',
               '-xctestrun', self._xctestrun_file_path,
               '-destination', 'id=%s' % device_id,
               '-derivedDataPath', derived_data_dir]
    xcodebuild_test_executor.XcodebuildTestExecutor(
        command, sdk=self._sdk, test_type=self._test_type).Execute()

  def GenerateXctestrunFile(self):
    """Generates xctestrun file and TEST_ROOT for running test."""
    if self._is_xctestrun_file_generated:
      return
    print 'Generating xctestrun file.'

    if self._work_dir:
      if not os.path.exists(self._work_dir):
        os.mkdir(self._work_dir)
    else:
      self._work_dir = tempfile.mkdtemp()
      self._delete_work_dir = True
    self._test_root_dir = os.path.join(self._work_dir, 'TEST_ROOT')
    if not os.path.exists(self._test_root_dir):
      os.mkdir(self._test_root_dir)
    # Move the app under test dir and test bundle dir into TEST_ROOT first to
    # avoid file copy later.
    # Because DummyProject._PrepareBuildProductsDir(build_productor_dir) will
    # copy both two files into build_productor_dir if the two files are not
    # there.
    self._app_under_test_dir = _MoveAndReplaceFile(
        self._app_under_test_dir, self._test_root_dir)
    self._test_bundle_dir = _MoveAndReplaceFile(
        self._test_bundle_dir, self._test_root_dir)
    if self._test_type == ios_constants.TestType.XCUITEST:
      self._GenerateXctestrunFileForXcuitest()
    elif self._test_type == ios_constants.TestType.XCTEST:
      self._GenerateXctestrunFileForXctest()
    # Replace the TESTROOT absolute path with __TESTROOT__ in xctestrun file.
    # Then the xctestrun file is not only used in the local machine, but also
    # other mac machines.
    with open(self._xctestrun_file_path, 'r') as xctestrun_file:
      xctestrun_file_content = xctestrun_file.read()
    xctestrun_file_content = xctestrun_file_content.replace(
        self._test_root_dir, TESTROOT_RELATIVE_PATH)
    with open(self._xctestrun_file_path, 'w+') as xctestrun_file:
      xctestrun_file.write(xctestrun_file_content)
    self._is_xctestrun_file_generated = True

  def GetXctestrunFileField(self, field):
    """Gets specific field in the xctestrun file.

    Args:
      field: string, the field in xctestrun file to view. A field is a list of
          keys separated by colon. E.g. Key1:Key2

    Returns:
      the object of the xctestrun file's field.

    Raises:
      PlistError: the field does not exist in the plist dict.
    """
    self.GenerateXctestrunFile()
    return self._xctestrun_file_plist_obj.GetPlistField(
        '%s:%s' % (self._test_name, field))

  def SetXctestrunFileField(self, field, value):
    """Set field with provided value in xctestrun file.

    Args:
      field: string, the field to be added in the xctestrun file. A field is a
          list of keys separated by colon. E.g. Key1:Key2
      value: a object, the value of the field to be added. It can be integer,
          bool, string, array, dict.

    Raises:
      PlistError: the field does not exist in the .plist file's dict.
    """
    self.GenerateXctestrunFile()
    self._xctestrun_file_plist_obj.SetPlistField(
        '%s:%s' % (self._test_name, field), value)

  def Close(self):
    """Deletes the temp directories."""
    if self._delete_work_dir and os.path.exists(self._work_dir):
      shutil.rmtree(self._work_dir)

  def _ValidateArguments(self):
    """Checks whether the arguments of this class are valid.

    Raises:
      IllegalArgumentError: when the sdk or test type is not supported.
    """
    if self._sdk not in ios_constants.SUPPORTED_SDKS:
      raise ios_errors.IllegalArgumentError(
          'The sdk %s is not supported. Supported sdks are %s.'
          % (self._sdk, ios_constants.SUPPORTED_SDKS))
    if self._test_type not in ios_constants.SUPPORTED_TEST_TYPES:
      raise ios_errors.IllegalArgumentError(
          'The test type %s is not supported. Supported test types are %s.'
          % (self._test_type, ios_constants.SUPPORTED_TEST_TYPES))

  def _GenerateXctestrunFileForXcuitest(self):
    """Generates the xctestrun file for XCUITest.

    The approach is creating a dummy project. Run 'build-for-testing' with the
    dummy project. Then the xctestrun file and XCTRunner app template will be
    under the build products directory of dummy project's derived data dir.
    """
    dummyproject_derived_data_dir = os.path.join(self._work_dir,
                                                 'dummyproject_derived_data')
    with dummy_project.DummyProject(
        self._app_under_test_dir, self._test_bundle_dir, self._sdk,
        self._test_type, self._work_dir) as dummy_project_instance:
      # Use TEST_ROOT as dummy project's build products dir.
      dummy_project_instance.BuildForTesting(
          self._test_root_dir, dummyproject_derived_data_dir)

    # The basic xctestrun file and XCTRunner app are under the build products
    # directory of dummy project's derived data dir.
    # DerivedData
    #  |
    #  +--Build
    #      |
    #      +--Products
    #          |
    #          +--Debug-***
    #              |
    #              +--***-Runner.app
    #          +--***.xctestrun
    derived_data_build_products_dir = os.path.join(
        dummyproject_derived_data_dir, 'Build', 'Products')

    generated_xctrunner_app_dirs = glob.glob('%s/Debug-*/*-Runner.app' %
                                             derived_data_build_products_dir)
    if not generated_xctrunner_app_dirs:
      raise ios_errors.XctestrunError("No generated XCTRunner app was found in "
                                      "the dummy project's build products dir.")
    if len(generated_xctrunner_app_dirs) > 1:
      raise ios_errors.XctestrunError("More than one XCTRunner app were found "
                                      "in the dummy project's build products "
                                      "dir.")

    xctrunner_app_dir = os.path.join(
        self._test_root_dir, os.path.basename(generated_xctrunner_app_dirs[0]))
    shutil.move(generated_xctrunner_app_dirs[0], xctrunner_app_dir)

    # The test bundle under XCTRunner.app/PlugIns is not actual test bundle. It
    # only contains Info.plist and _CodeSignature. So copy the real test bundle
    # under XCTRunner.app/PlugIns to replace it.
    xctrunner_plugins_dir = os.path.join(xctrunner_app_dir, 'PlugIns')
    if os.path.exists(xctrunner_plugins_dir):
      shutil.rmtree(xctrunner_plugins_dir)
    os.mkdir(xctrunner_plugins_dir)
    self._test_bundle_dir = _MoveAndReplaceFile(
        self._test_bundle_dir, xctrunner_plugins_dir)

    generated_xctestrun_file_paths = glob.glob('%s/*.xctestrun' %
                                               derived_data_build_products_dir)

    if not generated_xctestrun_file_paths:
      raise ios_errors.XctestrunError(
          "No generated xctestrun file was found in the dummy project's build "
          "products dir.")
    self._xctestrun_file_path = os.path.join(self._test_root_dir,
                                             'xctestrun.plist')
    shutil.move(generated_xctestrun_file_paths[0],
                self._xctestrun_file_path)
    self._xctestrun_file_plist_obj = plist_util.Plist(self._xctestrun_file_path)
    self._is_xctestrun_file_generated = True

    self.SetXctestrunFileField('TestHostPath', xctrunner_app_dir)
    self.SetXctestrunFileField('UITargetAppPath', self._app_under_test_dir)
    self.SetXctestrunFileField('TestBundlePath', self._test_bundle_dir)
    # When running on iphoneos, it is necessary to remove this field.
    # For iphonesimulator, this field won't effect the test functionality. To
    # be consistent, remove this field.
    self._xctestrun_file_plist_obj.DeletePlistField(
        '%s:TestingEnvironmentVariables:IDEiPhoneInternalTestBundleName'
        % self._test_name)

  def _GenerateXctestrunFileForXctest(self):
    """Generates the xctestrun file for XCTest.

    The approach is creating a dummy project. Run 'build-for-testing' with the
    dummy project. Then the xctestrun file will be under the build products
    directory of dummy project's derived data dir.
    """
    dummyproject_derived_data_dir = os.path.join(self._work_dir,
                                                 'dummyproject_derived_data')
    with dummy_project.DummyProject(
        self._app_under_test_dir, self._test_bundle_dir, self._sdk,
        self._test_type, self._work_dir) as dummy_project_instance:
      # Use TEST_ROOT as dummy project's build products dir.
      dummy_project_instance.BuildForTesting(
          self._test_root_dir, dummyproject_derived_data_dir)

    app_under_test_plugins_dir = os.path.join(
        self._app_under_test_dir, 'PlugIns')
    if not os.path.exists(app_under_test_plugins_dir):
      os.mkdir(app_under_test_plugins_dir)
    self._test_bundle_dir = _MoveAndReplaceFile(
        self._test_bundle_dir, app_under_test_plugins_dir)

    # The xctestrun file are under the build products directory of dummy
    # project's derived data dir.
    # DerivedData
    #  |
    #  +--Build
    #      |
    #      +--Products
    #          |
    #          +--***.xctestrun
    derived_data_build_products_dir = os.path.join(
        dummyproject_derived_data_dir, 'Build', 'Products')
    generated_xctestrun_file_paths = glob.glob('%s/*.xctestrun' %
                                               derived_data_build_products_dir)
    if not generated_xctestrun_file_paths:
      raise ios_errors.XctestrunError(
          "No generated xctestrun file was found in the dummy project's build "
          "products dir.")
    self._xctestrun_file_path = os.path.join(self._test_root_dir,
                                             'xctestrun.plist')
    shutil.move(generated_xctestrun_file_paths[0],
                self._xctestrun_file_path)
    self._xctestrun_file_plist_obj = plist_util.Plist(self._xctestrun_file_path)
    self._is_xctestrun_file_generated = True
    self.SetXctestrunFileField('TestBundlePath', self._test_bundle_dir)


def _MoveAndReplaceFile(src_file, target_parent_dir):
  """Move the file under target directory and replace it if it exists."""
  new_file_path = os.path.join(
      target_parent_dir, os.path.basename(src_file))
  if os.path.exists(new_file_path):
    shutil.rmtree(new_file_path)
  shutil.move(src_file, new_file_path)
  return new_file_path
